{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of resources."
            }
        },
        "edgeZone": {
            "type": "string",
            "defaultValue": "attatlanta1",
            "metadata": {
                "description": "The edge zone location of resources."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.7.7",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "networkPlugin": {
            "type": "string",
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "enableRBAC": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off of RBAC."
            }
        },
        "vmssNodePool": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off of virtual machine scale sets"
            }
        },
        "windowsProfile": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off of virtual machine scale sets"
            }
        },
        "enablePrivateCluster": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable private network access to the Kubernetes cluster."
            }
        },
        "enableHttpApplicationRouting": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off http application routing."
            }
        },
        "enableAzurePolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off Azure Policy addon."
            }
        },
        "enableSecretStoreCSIDriver": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off secret store CSI driver."
            }
        },
        "acrName": {
            "type": "string",
            "metadata": {
                "description": "Specify the name of the Azure Container Registry."
            }
        },
        "acrResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "The name of the resource group the container registry is associated with."
            }
        },
        "guidValue": {
            "type": "string",
            "metadata": {
                "description": "The unique id used in the role assignment of the kubernetes service to the container registry service. It is recommended to use the default value."
            },
            "defaultValue": "[newGuid()]"
        },
        "networkPolicy": {
            "type": "string",
            "defaultValue": "calico",
            "metadata": {
                "description": "Network policy used for building Kubernetes network."
            }
        },
        "vnetName": {
            "type": "string"
        },
        "localAddressPrefixes": {
            "type": "array",
            "defaultValue": ["10.15.0.0/16"]
        },
        "serviceSubnetName": {
            "type": "string",
            "defaultValue": "service-subnet",
            "metadata": {
                "description": "Name of virtual network subnet used for nodes and/or pods IP assignment."
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "defaultValue": "172.17.0.0/16",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "appSubnetName": {
            "type": "string",
            "defaultValue": "app-subnet",
            "metadata": {
                "description": "NetFoundry Subnet."
            }
        },
        "appCidr": {
            "type": "string",
            "metadata": {
                "description": "NetFoundry Subnet Prefix."
            }

        },
        "nfEdgeRouterNamePrefix": {
            "type": "string",
            "defaultValue": "nf-er"
        },
        "adminPublicKey": {
            "type": "securestring"
        },
        "edgeRouterKey1": {
            "type": "string",
            "metadata": {
              "description": "Enter the back end edge router key1"
            }
        }
    },
    "variables": {
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "appSubnetID": "[concat(variables('vnetId'), '/subnets/', parameters('appSubnetName'))]",
        "serviceSubnetID": "[concat(variables('vnetId'), '/subnets/', parameters('serviceSubnetName'))]",
        "nfErName1": "[concat(parameters('nfEdgeRouterNamePrefix'),'-',parameters('location'),'-02')]",
        "publicIpAddressEr1": "[concat(parameters('nfEdgeRouterNamePrefix'),'-',parameters('location'),'-02-ip')]",
        "networkInterfaceEr1": "[concat(parameters('nfEdgeRouterNamePrefix'),'-',parameters('location'),'-02-netif')]",
        "networkSecurityGroupName1": "[concat(parameters('nfEdgeRouterNamePrefix'),'-',parameters('location'),'-nsg2')]",
        "nsgId1": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName1'))]",
        "cloudInit1": "[concat('#cloud-config\nruncmd:\n- [/opt/netfoundry/router-registration, ', parameters('edgeRouterKey1'), ']')]"
    },
    "resources": [
        {
            "name": "[concat(parameters('acrName'), '/Microsoft.Authorization/', parameters('guidValue'))]",
            "apiVersion": "2018-09-01-preview",
            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]",
                "[concat('Microsoft.ContainerRegistry/registries/', parameters('acrName'))]"
            ],
            "properties": {
                "principalId": "[reference(parameters('resourceName'),'2021-07-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "scope": "[resourceId(parameters('acrResourceGroup'),'Microsoft.ContainerRegistry/registries/', parameters('acrName'))]"
            }
        
        },
        {
            "name": "[parameters('acrName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2021-09-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "adminUserEnabled": true
            },
            "tags": {}
        },
        {
            "name": "[parameters('resourceName')]",
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2021-07-01",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",
            "extendedLocation": {
                "type": "EdgeZone",
                "name": "[parameters('edgeZone')]"
            },
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": 2,
                        "enableAutoScaling": true,
                        "minCount": 1,
                        "maxCount": 2,
                        "vmSize": "Standard_B4ms",
                        "osType": "Linux",
                        "storageProfile": "ManagedDisks",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "maxPods": 110,
                        "availabilityZones": [],
                        "nodeTaints": [],
                        "enableNodePublicIP": false,
                        "tags": {},
                        "vnetSubnetID": "[variables('appSubnetID')]"
                    }
                ],
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "networkPolicy": "[parameters('networkPolicy')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
                "apiServerAccessProfile": {
                    "enablePrivateCluster": "[parameters('enablePrivateCluster')]"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": "[parameters('enableHttpApplicationRouting')]"
                    },
                    "azurepolicy": {
                        "enabled": "[parameters('enableAzurePolicy')]"
                    },
                    "azureKeyvaultSecretsProvider": {
                        "enabled": "[parameters('enableSecretStoreCSIDriver')]"
                    }
                }
            },
            "tags": {},
            "sku": {
                "name": "Basic",
                "tier": "Free"
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "name": "[parameters('vnetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "extendedLocation": {
                "type": "EdgeZone",
                "name": "[parameters('edgeZone')]"
            },
            "properties": {
                "subnets": [
                    {
                        "name": "[parameters('appSubnetName')]",
                        "id": "[variables('appSubnetID')]",
                        "properties": {
                            "addressPrefix": "[parameters('appCidr')]"
                        }
                    }
                ],
                "addressSpace": {
                    "addressPrefixes": "[parameters('localAddressPrefixes')]"
                }
            },
            "tags": {}
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "name": "[concat(parameters('vnetName'), '/', parameters('serviceSubnetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name))]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[reference(parameters('resourceName'),'2021-07-01','Full').identity.principalId]",
                "scope": "[variables('serviceSubnetId')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2021-08-01",
            "name": "[variables('networkInterfaceEr1')]",
            "location": "[parameters('location')]",
            "extendedLocation": {
                "type": "EdgeZone",
                "name": "[parameters('edgeZone')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName1'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressEr1'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('appSubnetID')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('publicIpAddressEr1'))]",
                                "properties": {
                                    "deleteOption": "delete"
                                }
                            }
                        }
                    }
                ],
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                    "id": "[variables('nsgId1')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2021-08-01",
            "name": "[variables('publicIpAddressEr1')]",
            "location": "[parameters('location')]",
            "extendedLocation": {
                "type": "EdgeZone",
                "name": "[parameters('edgeZone')]"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIpAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-08-01",
            "name": "[variables('networkSecurityGroupName1')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "priority": 300,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22"
                        }
                    },
                    {
                        "name": "Ziti-Services",
                        "properties": {
                            "priority": 310,
                            "protocol": "*",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "[parameters('localAddressPrefixes')[0]]",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-11-01",
            "name": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).privateFQDN]",
            "location": "[parameters('location')]",
            "extendedLocation": {
                "type": "EdgeZone",
                "name": "[parameters('edgeZone')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceEr1'))]",
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ],
            "plan": {
                "name": "ziti-edge-router",
                "product": "ziti-edge-router",
                "publisher": "netfoundryinc"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_B2s"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "deleteOption": "Delete"
                    },
                    "imageReference": {
                        "publisher": "netfoundryinc",
                        "offer": "ziti-edge-router",
                        "sku": "ziti-edge-router",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceEr1'))]",
                            "properties": {
                                "deleteOption": "Delete"
                            }
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).privateFQDN]",
                    "adminUsername": "ziggy",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/ziggy/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('adminPublicKey')]"
                                }
                            ]
                        }
                    },
                    "customData": "[base64(variables('cloudInit1'))]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            }
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).privateFQDN]"
        },
        "nfErName1": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddressEr1'))).IpAddress]"
        }
    }
}